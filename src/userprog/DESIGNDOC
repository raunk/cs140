		     +--------------------------+
       	       	     |		CS 140		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Jeremy Keeshin <jkeeshin@stanford.edu> 
Charlie Fang <charlief@stanford.edu>
Eric Conner <econner@stanford.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
None.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

Arguments are parsed using the strtok_r function to break the file name
string into tokens.  We first consume all of the tokens in the file name
string once to determine where the first argument should be 
placed.  We then restore the file name string to its original state by replacing
all of the extra null terminators written to it with spaces.  We then
tokenize the file name string one more time and place the strings in
memory walking up the stack toward PHYS_BASE from where we determined
the first argument should go.  

Next we perform a similar process to write the addresses for the argv array. We 
first determine where the first pointer should go based on the number of
arguments.  We then process up the stack from this location writing the
argument string addresses.  Finally we set the pointer to argv and set
argc.

We avoid overflowing the stack page by first calculating how much space the
passed in arguments will take up in memory.  If the arguments will exceed
the size of one page we kill the process with status -1.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

strtok(), as described by the C-standard, is not thread safe.  strtok() stores
the internal state of the string being parsed in a static buffer so that 
multiple strings cannot be safely tokenized simultaneously.  strtok_r()
fixes this problem by taking a user provided internal state pointer, 
allowing the function to be re-entrant.


>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

1. The Unix approach allows command interpretation to be easily changed.  If, 
for example, we wanted to change the delimiter between arguments, then we would
only need to change the shell.  The Pintos approach requires us to modify the
kernel itself which would be a much more intensive change to make.

2. The Unix approach prevents users from passing arbitrary data into the
kernel.  If the shell first verifies the validity of the argument string, then
there is a lot less chance for a user to pass a malicious string into the
kernel that could crash it or allow access to a restricted part of the system.

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

New members for struct ‘thread’:
struct list_elem child_elem;    /* Element for putting this thread into 
                                   other threads' lists of children */
struct list child_list;         /* List of child threads of current
                                   thread */
struct thread *parent;          /* The parent of the current thread */
struct semaphore is_loaded_sem; /* Used to signal whether a process 
                                   successfully loaded or not */
struct semaphore is_dying;      /* Used to signal a parent process 
                                   that might be waiting on the current 
								   process */


>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?



---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

Before dereferencing or otherwise utilizing any user provided pointer, the 
passed pointer is checked to make sure that it points to some valid, mapped 
location in user virtual address space.  If it does not then the
user process is killed immediately.  

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?